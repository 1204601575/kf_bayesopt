CPUcoreNumber: 4 #we use parallel computation. Input your computer's maximum core number so that we can use full speed

bayesoptTotalSampleNumber: 149
stateDOF: 6 #degree of freedom of state
observationDOF: 4 #degree of freedom of observation
controlDOF: 2 #degree of freedom of control input
beta: 0.7854  #angle of the propellant to the body
g: 3.711 #Gravity of Mars
rho: 0.02 #Planet surface atmosphere density 
C_D: 0.2 #Drag Coefficient
m_b: 1510.0 #mass of EDL system + rover (w/o heatshield or backshell)
m_f: 390.0 #mass of fuel
w_b: 3.2 #width of the sky crane body
h_b: 2.5 #height of the sky crane body
d_b: 2.9 #depth of the sky crane body
w_f: 1.0 #width of the propellant housing
h_f: 0.5 #height of the propellant housing
d_f: 1.0 #housing depth

t_start: 0.0 #start of the simulation time
t_end: 40.0 #end of the simulation time
dt: 0.1

#initial state
xi0: 0.0
xidot0: 0.0
z0: 20.0
zdot0: 0.0
theta0: 0.0
thetadot0: 0.0
disturbance: [0,0.2,0,0,0,0.001] #disturbance
P0: identity #just choose "identity" or "zero" as initial state covariance
P0_BASE: default #covariance of disturbance

Nsimruns: 200 #Number of simulation runs. To calculate NEES and NIS
#Number of maximum iterations of EKF equals to (t_end - t_start)/dt

#Noise part. Note the noise is the square of the gaussian white noise that being added to the process model
dim_pn: 3 #dimension of process noise
dim_on: 4 #dimension of observation noise
pnoise: [0.001, 0.001, 0.001] #default [0.0001, 0.0001, 0.0001] #name pn or on has confliction with some build in name, do not use pn or on
onoise: [4.0, 0.25, 0.000025, 0.000225] #[25, 0.25, 0.000025, 0.000225] #first element is set as 25 in matlab, won't be too large?

optimizationChoice: processNoise1D #optimize "processNoise" or "observationNoise" , "all" , "processNoise1D", "processNoise2D" (optimize the first/two element(s) of process noise so that we can visulize the surrogate model and acquisition function)
costChoice: JNIS
#"JNIS" or "JNEES" or "withRespectToX0", which means we compute JNIS or JNEES as cost function. 
#The third one compute the difference between kalman filter state output and desired state at each time stamp and add them together and then get the average

#Klin with respect to x0+disturbance
#Klin: [100.0001232511836, 406.572729235393, 99.999876748664, 519.082985361883, 3053.276500665991, 3140.468092695720, 
#       -99.999876748663, 406.571850660016, 100.000123251184, 519.080827294884, -3053.271918068241, 3140.465927164680]
#  1.0e+03 *
#   0.100000123251184   0.406572729235393   0.099999876748664   0.519082985361883   3.053276500665991   3.140468092695720
#  -0.099999876748663  -0.406571850660016   0.100000123251184   0.519080827294884  -3.053271918068241  -3.140465927164680

#Klin with respect to x0
Klin: [100.0, 406.5749626099999, 100.0, 519.0862903707701, 3053.284630106654, 3140.470009144412,
       -100.0, -406.5749626099999, 100.0, 519.0862903707700, -3053.284630106654, -3140.470009144412]
