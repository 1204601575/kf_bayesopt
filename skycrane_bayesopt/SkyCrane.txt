Nisar Ahmed
	
AttachmentsFri, Sep 28, 4:45 PM (2 days ago)
	
to Christoffer, s.julier@ucl.ac.uk, Zhaozhong

Hi Zhaozhong,


Sure thing, the code is attached. Note that this is just the code for generating the truth data and measurements off the Skycrane system, I didn't include the EKF here because I didn't get time to write it up. But I will need to do that anyway at some point for the final project this year, so I can share that with you once that's finished. But, the code attached should be sufficient to get you started and get the EKF up running within your code. 


There are 2 test scripts:

- test_SimpleSkyCraneDynamicsCtrl.m (which tests out the basic dynamics and measurement functions without adding any process or measurement noise).

- valgendata_SimpleSkyCrane.m (which generates  ground truth states and sensor measurements corrupted by process and measurement noises). 


Note that this system requires stabilization from a state feedback control law, i.e. in lines 260 and 269 of valgendata_SimpleSkyCrane.m, there are control inputs injected at each time step k of the form u(k) = uNominal(k) - Klin*(x(k)-xNominal(k)), where uNominal is a predetermined control control sequence (basically, how the thrusters should fire if the SkyCrane were to maintain equilibrium without any process noise or disturbances) and where xNominal is the desired hover state for the Sky Crane. Klin is a pre-computed gain matrix that maps the difference x(k)-xNominal(k) into a change in thrust to adjust uNominal(k). In a real system, x(k) in the u(k) equation would be replaced by the EKF estimate xhat(k). So, in this code I'm sharing, I'm pretending like the Sky Crane has "perfect" state estimates already to make sure that I can easily generate test data for feeding into an EKF later. But for a simulated "online test", it would be interesting in the BayesOpt set up to use the EKF estimate xhat(k) to compute u(k) [although a poorly tuned EKF could make the system go unstable...].


The rest of the functions in the ZIP folder are for running nonlinear ODE integration with ode45 in Matlab to get the ground truth states and produce nonlinear measurements, and to compute the Jacobians for the dynamics and the measurements needed for the EKF. Note that the measurement model here uses an accelerometer, which has a dependence on u(k) [the thrusts]. So, there all 4 state space matrices are needed for the EKF in this case. 

There are no biases modeled for the accelerometer or pitch rate gyro -- we can augment the model to include these and make the problem even more challenging, or we can start off simple and ignore them for time being (e.g. assuming that the maneuver time is so short that those biases won't matter much anyway). 


Let me know if any questions, happy to meet up next week to go over in more detail if needed. 

I forget if you already mentioned this: have you programmed/worked with EKFs before? 

There are some slight differences from the standard linear KF in terms of some implementation steps (the full nonlinear ODE model is used to predict the vector state and predict the vector measurement terms, and the Jacobians are used to approximate all the covariance and gain matrix quantities in the filter), but otherwise they're essentially the same. 

Thanks,

Nisar
